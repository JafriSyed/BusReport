System.registerDynamic('ng2-expanding-table/components/ng-table-directives', ['./table/ng-table.component', './table/ng-table-filtering.directive', './table/ng-table-paging.directive', './table/ng-table-sorting.directive', './table/ng-table-row.component'], true, function ($__require, exports, module) {
  "use strict";

  var define,
      global = this || self,
      GLOBAL = global;
  var ng_table_component_1 = $__require('./table/ng-table.component');
  var ng_table_filtering_directive_1 = $__require('./table/ng-table-filtering.directive');
  var ng_table_paging_directive_1 = $__require('./table/ng-table-paging.directive');
  var ng_table_sorting_directive_1 = $__require('./table/ng-table-sorting.directive');
  var ng_table_row_component_1 = $__require('./table/ng-table-row.component');
  exports.NG_TABLE_DIRECTIVES = [ng_table_row_component_1.NgTableRowComponent, ng_table_component_1.NgTableComponent, ng_table_filtering_directive_1.NgTableFilteringDirective, ng_table_paging_directive_1.NgTablePagingDirective, ng_table_sorting_directive_1.NgTableSortingDirective];
  return module.exports;
});
System.registerDynamic('ng2-expanding-table/components/table/ng-table.component', ['@angular/core', '@angular/platform-browser'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var platform_browser_1 = $__require('@angular/platform-browser');
    var NgTableComponent = function () {
        function NgTableComponent(sanitizer, ref, componentFactoryResolver, compiler) {
            this.sanitizer = sanitizer;
            this.ref = ref;
            this.componentFactoryResolver = componentFactoryResolver;
            this.compiler = compiler;
            this.rows = [];
            this.rowInputs = {};
            // Outputs (Events)
            this.tableChanged = new core_1.EventEmitter();
            this.cellClicked = new core_1.EventEmitter();
            this.expanderClicked = new core_1.EventEmitter();
            this.scrolledDown = new core_1.EventEmitter();
            this.valueEdit = new core_1.EventEmitter();
            this.showFilterRow = false;
            this.showExpandedRow = false;
            this.expandedRowIndex = null;
            this.currentChanges = {};
            this._columns = [];
            this._config = {};
            this.scrollPercentage = 0;
        }
        Object.defineProperty(NgTableComponent.prototype, "config", {
            get: function () {
                return this._config;
            },
            set: function (conf) {
                if (conf.className instanceof Array) {
                    conf.className = conf.className.join(' ');
                }
                this._config = conf;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NgTableComponent.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            set: function (values) {
                var _this = this;
                values.forEach(function (value) {
                    if (value.filtering) {
                        _this.showFilterRow = true;
                    }
                    if (value.className && value.className instanceof Array) {
                        value.className = value.className.join(' ');
                    }
                    var column = _this._columns.find(function (col) {
                        return col.name === value.name;
                    });
                    if (column) {
                        Object.assign(column, value);
                    }
                    if (!column) {
                        _this._columns.push(value);
                    }
                });
            },
            enumerable: true,
            configurable: true
        });
        NgTableComponent.prototype.sanitize = function (html) {
            return this.sanitizer.bypassSecurityTrustHtml(html);
        };
        Object.defineProperty(NgTableComponent.prototype, "configColumns", {
            get: function () {
                var sortColumns = [];
                this.columns.forEach(function (column) {
                    if (column.sort) {
                        sortColumns.push(column);
                    }
                });
                return { columns: sortColumns };
            },
            enumerable: true,
            configurable: true
        });
        NgTableComponent.prototype.onChangeTable = function (column) {
            this._columns.forEach(function (col) {
                if (col.name !== column.name && col.sort !== false) {
                    col.sort = '';
                }
            });
            this.showExpandedRow = false;
            this.expandedRowIndex = null;
            this.tableChanged.emit({ sorting: this.configColumns });
            this.ref.markForCheck();
        };
        NgTableComponent.prototype.toggleRowExpansion = function (row, rowNum) {
            if (this.showExpandedRow && this.expandedRowIndex == rowNum) {
                this.showExpandedRow = false;
                this.expandedRowIndex = null;
            } else {
                this.showExpandedRow = true;
                this.expandedRowIndex = rowNum;
                this.expanderClicked.emit({ row: row, rowNum: rowNum });
                this.ref.markForCheck();
            }
        };
        ;
        NgTableComponent.prototype.checkScroll = function (event) {
            this.scrollPercentage = event.target.scrollTop / (event.target.scrollHeight - event.target.clientHeight);
            if (this.scrollPercentage > this.config.renderMoreAt) {
                this.scrolledDown.emit(this.scrollPercentage);
            }
        };
        ;
        NgTableComponent.prototype.getData = function (row, propertyName) {
            return propertyName.split('.').reduce(function (prev, curr) {
                return prev[curr];
            }, row);
        };
        NgTableComponent.prototype.cellClick = function (row, column) {
            this.cellClicked.emit({ row: row, column: column });
        };
        NgTableComponent.prototype.setRowToEdit = function (rowIndex, column) {
            this.editingRow = rowIndex;
            for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {
                var col = _a[_i];
                if (col.editWith != this.columns[column].name) {
                    col.isEditing = false;
                } else if (col.editWith === this.columns[column].name) {
                    col.isEditing = true;
                }
            }
            this.columns[column].isEditing = true;
        };
        NgTableComponent.prototype.updateChanges = function (colName, val) {
            this.currentChanges[colName] = val.value;
        };
        NgTableComponent.prototype.submitChange = function (row, rIndex, columnName, cIndex, newVal) {
            var _this = this;
            var valueChange = {
                rowChanged: row,
                rowIndex: rIndex,
                columnChanged: columnName,
                columnIndex: cIndex,
                oldValue: row[columnName],
                newValue: newVal.value
            };
            var allChanges = [valueChange];
            this.columns.forEach(function (col, index) {
                if (col.editWith === _this.columns[cIndex].name && _this.currentChanges[col.name] != undefined) {
                    var newValueChange = {
                        rowChanged: row,
                        rowIndex: rIndex,
                        columnChanged: col.name,
                        columnIndex: index,
                        oldValue: row[col.name],
                        newValue: _this.currentChanges[col.name]
                    };
                    allChanges.push(newValueChange);
                }
            });
            // Check for changes
            var noChanges = true;
            for (var _i = 0, allChanges_1 = allChanges; _i < allChanges_1.length; _i++) {
                var change = allChanges_1[_i];
                if (change.newValue != change.oldValue) {
                    noChanges = false;
                }
            }
            if (noChanges) {
                this.editingRow = null;
                return;
            }
            this.valueEdit.emit(allChanges);
            this.editingRow = null;
            this.currentChanges = {};
        };
        NgTableComponent.decorators = [{ type: core_1.Component, args: [{
                selector: 'ng-table',
                template: "\n    <div [ngStyle]=\"{height: config?.height}\" style=\"overflow-y:auto; width:auto; overflow-x:hidden; display:block;\" (scroll)=\"checkScroll($event)\">\n      <table class=\"table dataTable\" ngClass=\"{{config.className || ''}}\"\n             role=\"grid\" style=\"width: 100%;\" >\n        <thead>\n          <tr role=\"row\">\n            <th *ngIf=\"expandable\"></th>\n            <th *ngFor=\"let column of columns\" [ngTableSorting]=\"config\" [column]=\"column\"\n                (sortChanged)=\"onChangeTable($event)\" ngClass=\"{{column.className || ''}}\">\n              {{column.title}}\n              <i *ngIf=\"config && column.sort\" class=\"pull-right fa\"\n                [ngClass]=\"{'fa-chevron-down': column.sort === 'desc', 'fa-chevron-up': column.sort === 'asc'}\"></i>\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n        <tr *ngIf=\"showFilterRow\">\n          <td *ngIf=\"expandable\"></td>\n          <td *ngFor=\"let column of columns\">\n            <input *ngIf=\"column.filtering\" placeholder=\"{{column.filtering.placeholder}}\"\n                   [ngTableFiltering]=\"column.filtering\"\n                   class=\"form-control\"\n                   style=\"width: 85%; padding:none;\"\n                   (tableChanged)=\"onChangeTable(config)\"/>\n          </td>\n        </tr>\n          <template ngFor let-row [ngForOf]=\"rows\" let-i= \"index\" >\n          <tr [ngClass]=\"{'table-info': showExpandedRow && (i == expandedRowIndex) && expandable }\">\n            <td (click)=\"toggleRowExpansion(row, i)\" *ngIf=\"expandable\" (click)=\"cellClick(row, 'expand', i)\" style=\"text-align:center; padding:0px; padding-top:7px;\"><a style=\"width:100%; text-align:center;\">\n              <i [ngClass]=\"{'fa': true, 'fa-plus-circle': i != expandedRowIndex, 'fa-minus-circle' : i == expandedRowIndex}\" style=\"font-size:1.5em; cursor:pointer\"></i></a>\n            </td>\n              <template ngFor let-column [ngForOf]=\"columns\" let-j= \"index\" >\n\n                <td (click)=\"cellClick(row, column.name, i)\" *ngIf=\"!column.isEditing || editingRow != i\">\n                  <div style=\"display:inline-block\" [innerHtml]=\"sanitize(getData(row, column.name))\"> </div> \n                  <span class=\"pull-right\" *ngIf=\"column.editable && !column.editWith\"><i class=\"fa fa-pencil\" aria-hidden=\"true\" (click)=\"setRowToEdit(i, j)\"></i></span>\n                </td>\n\n                <td *ngIf=\"column.isEditing && editingRow == i && !column.options\">\n                  <input class=\"form-control\" style=\"width:70%;display:inline-block; height:70%;\" [value]=\"getData(row, column.name)\" [id]=\"column.name\" #val (keyup)=\"updateChanges(column.name, val)\">\n                  <span class=\"pull-right\" *ngIf=\"column.editable && !column.editWith\"><i class=\"fa fa-check-square-o success\" aria-hidden=\"true\" (click)=\"submitChange(row, i, column.name, j, val)\"></i></span>\n                </td>\n                <td *ngIf=\"column.isEditing && editingRow == i && column.options\">\n                  <select class=\"form-control\" style=\"width:70%;display:inline-block;height:70%;\" [value]=\"getData(row, column.name)\" [id]=\"column.name\" #val (keyup)=\"updateChanges(column.name, val)\" (mouseup)=\"updateChanges(column.name, val)\">\n                    <option *ngFor=\"let option of column.options\" [value]=\"option\"> {{option}}</option>\n                  </select>\n                  <span class=\"pull-right\" *ngIf=\"column.editable && !column.editWith\"><i class=\"fa fa-check-square-o success\" aria-hidden=\"true\" (click)=\"submitChange(row, i, column.name, j, val)\"></i></span>\n                </td>\n              </template>\n          </tr>\n          <tr *ngIf=\"showExpandedRow && (i == expandedRowIndex) && expandable\" class=\"table-info\" >\n              <td [attr.colspan]=\"columns.length + 1\">\n                <ng-table-row [rowComponent]=\"expandedComponent\" [rowInputs]=\"rowInputs\"></ng-table-row>\n              </td>\n          </tr>\n          </template>\n        </tbody>\n      </table>\n    </div>\n  ",
                changeDetection: core_1.ChangeDetectionStrategy.OnPush
            }] }];
        /** @nocollapse */
        NgTableComponent.ctorParameters = [{ type: platform_browser_1.DomSanitizer }, { type: core_1.ChangeDetectorRef }, { type: core_1.ComponentFactoryResolver }, { type: core_1.Compiler }];
        NgTableComponent.propDecorators = {
            'expandedComponent': [{ type: core_1.Input }],
            'rows': [{ type: core_1.Input }],
            'expandable': [{ type: core_1.Input }],
            'editingRow': [{ type: core_1.Input }],
            'editingColumn': [{ type: core_1.Input }],
            'rowInputs': [{ type: core_1.Input }],
            'config': [{ type: core_1.Input }],
            'tableChanged': [{ type: core_1.Output }],
            'cellClicked': [{ type: core_1.Output }],
            'expanderClicked': [{ type: core_1.Output }],
            'scrolledDown': [{ type: core_1.Output }],
            'valueEdit': [{ type: core_1.Output }],
            'columns': [{ type: core_1.Input }]
        };
        return NgTableComponent;
    }();
    exports.NgTableComponent = NgTableComponent;
    return module.exports;
});
System.registerDynamic('ng2-expanding-table/components/table/ng-table-filtering.directive', ['@angular/core'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    // import {setProperty} from 'angular2/ts/src/core/forms/directives/shared';
    function setProperty(renderer, elementRef, propName, propValue) {
        renderer.setElementProperty(elementRef, propName, propValue);
    }
    var NgTableFilteringDirective = function () {
        function NgTableFilteringDirective(element, renderer) {
            this.ngTableFiltering = {
                filterString: '',
                columnName: 'name'
            };
            this.tableChanged = new core_1.EventEmitter();
            this.element = element;
            this.renderer = renderer;
            // Set default value for filter
            setProperty(this.renderer, this.element, 'value', this.ngTableFiltering.filterString);
        }
        Object.defineProperty(NgTableFilteringDirective.prototype, "config", {
            get: function () {
                return this.ngTableFiltering;
            },
            set: function (value) {
                this.ngTableFiltering = value;
            },
            enumerable: true,
            configurable: true
        });
        NgTableFilteringDirective.prototype.onChangeFilter = function (event) {
            this.ngTableFiltering.filterString = event;
            this.tableChanged.emit({ filtering: this.ngTableFiltering });
        };
        NgTableFilteringDirective.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngTableFiltering]' }] }];
        /** @nocollapse */
        NgTableFilteringDirective.ctorParameters = [{ type: core_1.ElementRef }, { type: core_1.Renderer }];
        NgTableFilteringDirective.propDecorators = {
            'ngTableFiltering': [{ type: core_1.Input }],
            'tableChanged': [{ type: core_1.Output }],
            'config': [{ type: core_1.Input }],
            'onChangeFilter': [{ type: core_1.HostListener, args: ['input', ['$event.target.value']] }]
        };
        return NgTableFilteringDirective;
    }();
    exports.NgTableFilteringDirective = NgTableFilteringDirective;
    return module.exports;
});
System.registerDynamic("ng2-expanding-table/components/table/ng-table-paging.directive", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require("@angular/core");
    var NgTablePagingDirective = function () {
        function NgTablePagingDirective() {
            this.ngTablePaging = true;
            this.tableChanged = new core_1.EventEmitter();
        }
        Object.defineProperty(NgTablePagingDirective.prototype, "config", {
            get: function () {
                return this.ngTablePaging;
            },
            set: function (value) {
                this.ngTablePaging = value;
            },
            enumerable: true,
            configurable: true
        });
        NgTablePagingDirective.prototype.onChangePage = function (event) {
            // Object.assign(this.config, event);
            if (this.ngTablePaging) {
                this.tableChanged.emit({ paging: event });
            }
        };
        NgTablePagingDirective.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngTablePaging]' }] }];
        /** @nocollapse */
        NgTablePagingDirective.ctorParameters = [];
        NgTablePagingDirective.propDecorators = {
            'ngTablePaging': [{ type: core_1.Input }],
            'tableChanged': [{ type: core_1.Output }],
            'config': [{ type: core_1.Input }],
            'onChangePage': [{ type: core_1.HostListener, args: ['pagechanged', ['$event']] }]
        };
        return NgTablePagingDirective;
    }();
    exports.NgTablePagingDirective = NgTablePagingDirective;
    return module.exports;
});
System.registerDynamic("ng2-expanding-table/components/table/ng-table-sorting.directive", ["@angular/core"], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require("@angular/core");
    var NgTableSortingDirective = function () {
        function NgTableSortingDirective() {
            this.sortChanged = new core_1.EventEmitter();
        }
        Object.defineProperty(NgTableSortingDirective.prototype, "config", {
            get: function () {
                return this.ngTableSorting;
            },
            set: function (value) {
                this.ngTableSorting = value;
            },
            enumerable: true,
            configurable: true
        });
        NgTableSortingDirective.prototype.onToggleSort = function (event) {
            if (event) {
                event.preventDefault();
            }
            if (this.ngTableSorting && this.column && this.column.sort !== false) {
                switch (this.column.sort) {
                    case 'asc':
                        this.column.sort = 'desc';
                        break;
                    case 'desc':
                        this.column.sort = '';
                        break;
                    default:
                        this.column.sort = 'asc';
                        break;
                }
                this.sortChanged.emit(this.column);
            }
        };
        NgTableSortingDirective.decorators = [{ type: core_1.Directive, args: [{ selector: '[ngTableSorting]' }] }];
        /** @nocollapse */
        NgTableSortingDirective.ctorParameters = [];
        NgTableSortingDirective.propDecorators = {
            'ngTableSorting': [{ type: core_1.Input }],
            'column': [{ type: core_1.Input }],
            'sortChanged': [{ type: core_1.Output }],
            'config': [{ type: core_1.Input }],
            'onToggleSort': [{ type: core_1.HostListener, args: ['click', ['$event']] }]
        };
        return NgTableSortingDirective;
    }();
    exports.NgTableSortingDirective = NgTableSortingDirective;
    return module.exports;
});
System.registerDynamic('ng2-expanding-table/components/table/ng-table-row.component', ['@angular/core'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var NgTableRowComponent = function () {
        function NgTableRowComponent(componentFactoryResolver, compiler, cdRef) {
            this.componentFactoryResolver = componentFactoryResolver;
            this.compiler = compiler;
            this.cdRef = cdRef;
            this.rowInputs = {};
            this.isViewInitialized = false;
        }
        NgTableRowComponent.prototype.updateComponent = function () {
            if (!this.isViewInitialized) {
                return;
            }
            if (this.cmpRef) {
                this.cmpRef.destroy();
            }
            var factory = this.componentFactoryResolver.resolveComponentFactory(this.rowComponent);
            this.cmpRef = this.rowTarget.createComponent(factory);
            for (var input in this.rowInputs) {
                if (this.rowInputs.hasOwnProperty(input)) {
                    this.cmpRef.instance[input] = this.rowInputs[input];
                }
            }
            this.cdRef.detectChanges();
        };
        NgTableRowComponent.prototype.ngOnChanges = function () {
            this.updateComponent();
        };
        NgTableRowComponent.prototype.ngAfterViewInit = function () {
            this.isViewInitialized = true;
            this.updateComponent();
        };
        NgTableRowComponent.prototype.ngOnDestroy = function () {
            if (this.cmpRef) {
                this.cmpRef.destroy();
            }
        };
        NgTableRowComponent.decorators = [{ type: core_1.Component, args: [{
                selector: 'ng-table-row',
                template: "<div #rowTarget></div>"
            }] }];
        /** @nocollapse */
        NgTableRowComponent.ctorParameters = [{ type: core_1.ComponentFactoryResolver }, { type: core_1.Compiler }, { type: core_1.ChangeDetectorRef }];
        NgTableRowComponent.propDecorators = {
            'rowTarget': [{ type: core_1.ViewChild, args: ['rowTarget', { read: core_1.ViewContainerRef }] }],
            'rowComponent': [{ type: core_1.Input }],
            'rowInputs': [{ type: core_1.Input }]
        };
        return NgTableRowComponent;
    }();
    exports.NgTableRowComponent = NgTableRowComponent;
    return module.exports;
});
System.registerDynamic('ng2-expanding-table/components/ng-table-module', ['@angular/core', '@angular/common', './table/ng-table.component', './table/ng-table-filtering.directive', './table/ng-table-paging.directive', './table/ng-table-sorting.directive', './table/ng-table-row.component'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    var core_1 = $__require('@angular/core');
    var common_1 = $__require('@angular/common');
    var ng_table_component_1 = $__require('./table/ng-table.component');
    var ng_table_filtering_directive_1 = $__require('./table/ng-table-filtering.directive');
    var ng_table_paging_directive_1 = $__require('./table/ng-table-paging.directive');
    var ng_table_sorting_directive_1 = $__require('./table/ng-table-sorting.directive');
    var ng_table_row_component_1 = $__require('./table/ng-table-row.component');
    var Ng2TableModule = function () {
        function Ng2TableModule() {}
        Ng2TableModule.decorators = [{ type: core_1.NgModule, args: [{
                imports: [common_1.CommonModule],
                declarations: [ng_table_component_1.NgTableComponent, ng_table_filtering_directive_1.NgTableFilteringDirective, ng_table_paging_directive_1.NgTablePagingDirective, ng_table_sorting_directive_1.NgTableSortingDirective, ng_table_row_component_1.NgTableRowComponent],
                exports: [ng_table_component_1.NgTableComponent, ng_table_filtering_directive_1.NgTableFilteringDirective, ng_table_paging_directive_1.NgTablePagingDirective, ng_table_sorting_directive_1.NgTableSortingDirective]
            }] }];
        /** @nocollapse */
        Ng2TableModule.ctorParameters = [];
        return Ng2TableModule;
    }();
    exports.Ng2TableModule = Ng2TableModule;
    return module.exports;
});
System.registerDynamic('ng2-expanding-table/ng2-expanding-table', ['./components/table/ng-table.component', './components/table/ng-table-filtering.directive', './components/table/ng-table-paging.directive', './components/table/ng-table-sorting.directive', './components/ng-table-directives', './components/ng-table-module'], true, function ($__require, exports, module) {
    "use strict";

    var define,
        global = this || self,
        GLOBAL = global;
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    var ng_table_component_1 = $__require('./components/table/ng-table.component');
    var ng_table_filtering_directive_1 = $__require('./components/table/ng-table-filtering.directive');
    var ng_table_paging_directive_1 = $__require('./components/table/ng-table-paging.directive');
    var ng_table_sorting_directive_1 = $__require('./components/table/ng-table-sorting.directive');
    __export($__require('./components/table/ng-table.component'));
    __export($__require('./components/table/ng-table-filtering.directive'));
    __export($__require('./components/table/ng-table-paging.directive'));
    __export($__require('./components/table/ng-table-sorting.directive'));
    __export($__require('./components/ng-table-directives'));
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.default = {
        directives: [ng_table_component_1.NgTableComponent, ng_table_filtering_directive_1.NgTableFilteringDirective, ng_table_sorting_directive_1.NgTableSortingDirective, ng_table_paging_directive_1.NgTablePagingDirective]
    };
    var ng_table_module_1 = $__require('./components/ng-table-module');
    exports.Ng2TableModule = ng_table_module_1.Ng2TableModule;
    return module.exports;
});
//# sourceMappingURL=ng2-expanding-table.js.map